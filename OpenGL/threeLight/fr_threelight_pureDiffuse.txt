#version 460 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
  
uniform vec3 lightPos; 
uniform vec3 lightPos2; 
uniform vec3 lightPos3; 

uniform vec3 viewPos; 

uniform vec3 lightColor;
uniform vec3 lightColor2;
uniform vec3 lightColor3;

uniform vec3 objectColor;

void main()
{   
    //lightPos
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    

    //lightPos2
    // diffuse 
    vec3 lightDir2 = normalize(lightPos2 - FragPos);
    diff = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse2 = diff * lightColor2;
    
   
    //lightPos3
    // diffuse 
    vec3 lightDir3 = normalize(lightPos3 - FragPos);
    diff = max(dot(norm, lightDir3), 0.0);
    vec3 diffuse3 = diff * lightColor3;
    
   
    vec3 result = diffuse * objectColor + diffuse2 * objectColor + diffuse3 * objectColor;
    FragColor = vec4(result, 1.0);
} 